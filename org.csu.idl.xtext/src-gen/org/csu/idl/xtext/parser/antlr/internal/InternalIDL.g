/*
* generated by Xtext
*/
grammar InternalIDL;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.csu.idl.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.csu.idl.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.csu.idl.xtext.services.IDLGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private IDLGrammarAccess grammarAccess;
 	
    public InternalIDLParser(TokenStream input, IDLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "specification";	
   	}
   	
   	@Override
   	protected IDLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulespecification
entryRulespecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecificationRule()); }
	 iv_rulespecification=rulespecification 
	 { $current=$iv_rulespecification.current; } 
	 EOF 
;

// Rule specification
rulespecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSpecificationAccess().getTranslationUnitAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getIncludesInclude_declParserRuleCall_1_0()); 
	    }
		lv_includes_1_0=ruleinclude_decl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"includes",
        		lv_includes_1_0, 
        		"include_decl");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getContainsDefinitionParserRuleCall_2_0()); 
	    }
		lv_contains_2_0=ruledefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"contains",
        		lv_contains_2_0, 
        		"definition");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleinclude_decl
entryRuleinclude_decl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInclude_declRule()); }
	 iv_ruleinclude_decl=ruleinclude_decl 
	 { $current=$iv_ruleinclude_decl.current; } 
	 EOF 
;

// Rule include_decl
ruleinclude_decl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#include' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInclude_declAccess().getIncludeKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getInclude_declAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInclude_declRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuledefinition
entryRuledefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	 iv_ruledefinition=ruledefinition 
	 { $current=$iv_ruledefinition.current; } 
	 EOF 
;

// Rule definition
ruledefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getType_declParserRuleCall_0_0()); 
    }
    this_type_decl_0=ruletype_decl
    { 
        $current = $this_type_decl_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefinitionAccess().getSemicolonKeyword_0_1());
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getConst_declParserRuleCall_1_0()); 
    }
    this_const_decl_2=ruleconst_decl
    { 
        $current = $this_const_decl_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefinitionAccess().getSemicolonKeyword_1_1());
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getExcept_declParserRuleCall_2_0()); 
    }
    this_except_decl_4=ruleexcept_decl
    { 
        $current = $this_except_decl_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDefinitionAccess().getSemicolonKeyword_2_1());
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getInterface_declParserRuleCall_3_0()); 
    }
    this_interface_decl_6=ruleinterface_decl
    { 
        $current = $this_interface_decl_6.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDefinitionAccess().getSemicolonKeyword_3_1());
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getInterface_fwdParserRuleCall_4_0()); 
    }
    this_interface_fwd_8=ruleinterface_fwd
    { 
        $current = $this_interface_fwd_8.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDefinitionAccess().getSemicolonKeyword_4_1());
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getModuleParserRuleCall_5_0()); 
    }
    this_module_10=rulemodule
    { 
        $current = $this_module_10.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDefinitionAccess().getSemicolonKeyword_5_1());
    }
))
;





// Entry rule entryRulemodule
entryRulemodule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_rulemodule=rulemodule 
	 { $current=$iv_rulemodule.current; } 
	 EOF 
;

// Rule module
rulemodule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='module' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModuleAccess().getModuleKeyword_0());
    }
(
(
		lv_identifier_1_0=RULE_ID
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getModuleAccess().getIdentifierIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModuleAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getContainsDefinitionParserRuleCall_3_0_0()); 
	    }
		lv_contains_3_0=ruledefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"contains",
        		lv_contains_3_0, 
        		"definition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModuleAccess().getSemicolonKeyword_3_1());
    }
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModuleAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleinterface_decl
entryRuleinterface_decl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterface_declRule()); }
	 iv_ruleinterface_decl=ruleinterface_decl 
	 { $current=$iv_ruleinterface_decl.current; } 
	 EOF 
;

// Rule interface_decl
ruleinterface_decl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_isAbstract_0_0=	'abstract' 
    {
        newLeafNode(lv_isAbstract_0_0, grammarAccess.getInterface_declAccess().getIsAbstractAbstractKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterface_declRule());
	        }
       		setWithLastConsumed($current, "isAbstract", true, "abstract");
	    }

)
)
    |(
(
		lv_isCustom_1_0=	'local' 
    {
        newLeafNode(lv_isCustom_1_0, grammarAccess.getInterface_declAccess().getIsCustomLocalKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterface_declRule());
	        }
       		setWithLastConsumed($current, "isCustom", true, "local");
	    }

)
))?	otherlv_2='interface' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterface_declAccess().getInterfaceKeyword_1());
    }
(
(
		lv_identifier_3_0=RULE_ID
		{
			newLeafNode(lv_identifier_3_0, grammarAccess.getInterface_declAccess().getIdentifierIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterface_declRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_3_0, 
        		"ID");
	    }

)
)(	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInterface_declAccess().getColonKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterface_declRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getInterface_declAccess().getDerivesFromInterfaceDefCrossReference_3_1_0()); 
	}

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInterface_declAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterface_declRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getInterface_declAccess().getDerivesFromInterfaceDefCrossReference_3_2_1_0()); 
	}

)
))*)?	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getInterface_declAccess().getLeftCurlyBracketKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_declAccess().getContainsExportParserRuleCall_5_0_0()); 
	    }
		lv_contains_9_0=ruleexport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_declRule());
	        }
       		add(
       			$current, 
       			"contains",
        		lv_contains_9_0, 
        		"export");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getInterface_declAccess().getSemicolonKeyword_5_1());
    }
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getInterface_declAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleinterface_fwd
entryRuleinterface_fwd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterface_fwdRule()); }
	 iv_ruleinterface_fwd=ruleinterface_fwd 
	 { $current=$iv_ruleinterface_fwd.current; } 
	 EOF 
;

// Rule interface_fwd
ruleinterface_fwd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='abstract' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterface_fwdAccess().getAbstractKeyword_0_0());
    }

    |	otherlv_1='local' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterface_fwdAccess().getLocalKeyword_0_1());
    }
)?	otherlv_2='interface' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterface_fwdAccess().getInterfaceKeyword_1());
    }
(
(
		lv_identifier_3_0=RULE_ID
		{
			newLeafNode(lv_identifier_3_0, grammarAccess.getInterface_fwdAccess().getIdentifierIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterface_fwdRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_3_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleexport
entryRuleexport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExportRule()); }
	 iv_ruleexport=ruleexport 
	 { $current=$iv_ruleexport.current; } 
	 EOF 
;

// Rule export
ruleexport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExportAccess().getType_declParserRuleCall_0_0()); 
    }
    this_type_decl_0=ruletype_decl
    { 
        $current = $this_type_decl_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExportAccess().getSemicolonKeyword_0_1());
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExportAccess().getConst_declParserRuleCall_1_0()); 
    }
    this_const_decl_2=ruleconst_decl
    { 
        $current = $this_const_decl_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExportAccess().getSemicolonKeyword_1_1());
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExportAccess().getExcept_declParserRuleCall_2_0()); 
    }
    this_except_decl_4=ruleexcept_decl
    { 
        $current = $this_except_decl_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExportAccess().getSemicolonKeyword_2_1());
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExportAccess().getAttr_declParserRuleCall_3_0()); 
    }
    this_attr_decl_6=ruleattr_decl
    { 
        $current = $this_attr_decl_6.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExportAccess().getSemicolonKeyword_3_1());
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExportAccess().getOp_declParserRuleCall_4_0()); 
    }
    this_op_decl_8=ruleop_decl
    { 
        $current = $this_op_decl_8.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getExportAccess().getSemicolonKeyword_4_1());
    }
))
;





// Entry rule entryRuleop_decl
entryRuleop_decl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOp_declRule()); }
	 iv_ruleop_decl=ruleop_decl 
	 { $current=$iv_ruleop_decl.current; } 
	 EOF 
;

// Rule op_decl
ruleop_decl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_isOneway_0_0=	'oneway' 
    {
        newLeafNode(lv_isOneway_0_0, grammarAccess.getOp_declAccess().getIsOnewayOnewayKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOp_declRule());
	        }
       		setWithLastConsumed($current, "isOneway", true, "oneway");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getOp_declAccess().getContainedTypeOp_type_specParserRuleCall_1_0_0()); 
	    }
		lv_containedType_1_0=ruleop_type_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOp_declRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_1_0, 
        		"op_type_spec");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOp_declRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getOp_declAccess().getSharedTypeTypedefDefCrossReference_1_1_0()); 
	}

)
))(
(
		lv_identifier_3_0=RULE_ID
		{
			newLeafNode(lv_identifier_3_0, grammarAccess.getOp_declAccess().getIdentifierIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOp_declRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_3_0, 
        		"ID");
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOp_declAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOp_declAccess().getParametersParam_declParserRuleCall_4_0_0()); 
	    }
		lv_parameters_5_0=ruleparam_decl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOp_declRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"param_decl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOp_declAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOp_declAccess().getParametersParam_declParserRuleCall_4_1_1_0()); 
	    }
		lv_parameters_7_0=ruleparam_decl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOp_declRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_7_0, 
        		"param_decl");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getOp_declAccess().getRightParenthesisKeyword_5());
    }
(	otherlv_9='raises' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getOp_declAccess().getRaisesKeyword_6_0());
    }
	otherlv_10='(' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getOp_declAccess().getLeftParenthesisKeyword_6_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOp_declRule());
	        }
        }
	otherlv_11=RULE_ID
	{
		newLeafNode(otherlv_11, grammarAccess.getOp_declAccess().getCanRaiseExceptionDefCrossReference_6_2_0()); 
	}

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getOp_declAccess().getCommaKeyword_6_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOp_declRule());
	        }
        }
	otherlv_13=RULE_ID
	{
		newLeafNode(otherlv_13, grammarAccess.getOp_declAccess().getCanRaiseExceptionDefCrossReference_6_3_1_0()); 
	}

)
))*	otherlv_14=')' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getOp_declAccess().getRightParenthesisKeyword_6_4());
    }
)?(	otherlv_15='context' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getOp_declAccess().getContextKeyword_7_0());
    }
	otherlv_16='(' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getOp_declAccess().getLeftParenthesisKeyword_7_1());
    }
(
(
		lv_contexts_17_0=RULE_STRING
		{
			newLeafNode(lv_contexts_17_0, grammarAccess.getOp_declAccess().getContextsSTRINGTerminalRuleCall_7_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOp_declRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"contexts",
        		lv_contexts_17_0, 
        		"STRING");
	    }

)
)(	otherlv_18=',' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getOp_declAccess().getCommaKeyword_7_3_0());
    }
(
(
		lv_contexts_19_0=RULE_STRING
		{
			newLeafNode(lv_contexts_19_0, grammarAccess.getOp_declAccess().getContextsSTRINGTerminalRuleCall_7_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOp_declRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"contexts",
        		lv_contexts_19_0, 
        		"STRING");
	    }

)
))*	otherlv_20=')' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getOp_declAccess().getRightParenthesisKeyword_7_4());
    }
)?)
;





// Entry rule entryRuleop_type_spec
entryRuleop_type_spec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOp_type_specRule()); }
	 iv_ruleop_type_spec=ruleop_type_spec 
	 { $current=$iv_ruleop_type_spec.current; } 
	 EOF 
;

// Rule op_type_spec
ruleop_type_spec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOp_type_specAccess().getBase_type_specParserRuleCall_0()); 
    }
    this_base_type_spec_0=rulebase_type_spec
    { 
        $current = $this_base_type_spec_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getOp_type_specAccess().getPrimitiveDefAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOp_type_specAccess().getKindVoid_typeEnumRuleCall_1_1_0()); 
	    }
		lv_kind_2_0=rulevoid_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOp_type_specRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_2_0, 
        		"void_type");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleparam_decl
entryRuleparam_decl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParam_declRule()); }
	 iv_ruleparam_decl=ruleparam_decl 
	 { $current=$iv_ruleparam_decl.current; } 
	 EOF 
;

// Rule param_decl
ruleparam_decl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParam_declAccess().getDirectionParam_attributeEnumRuleCall_0_0()); 
	    }
		lv_direction_0_0=ruleparam_attribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParam_declRule());
	        }
       		set(
       			$current, 
       			"direction",
        		lv_direction_0_0, 
        		"param_attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getParam_declAccess().getContainedTypeBase_type_specParserRuleCall_1_0_0()); 
	    }
		lv_containedType_1_0=rulebase_type_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParam_declRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_1_0, 
        		"base_type_spec");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParam_declRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getParam_declAccess().getSharedTypeTypedefDefCrossReference_1_1_0()); 
	}

)
))(
(
		lv_identifier_3_0=RULE_ID
		{
			newLeafNode(lv_identifier_3_0, grammarAccess.getParam_declAccess().getIdentifierIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParam_declRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_3_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleattr_decl
entryRuleattr_decl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttr_declRule()); }
	 iv_ruleattr_decl=ruleattr_decl 
	 { $current=$iv_ruleattr_decl.current; } 
	 EOF 
;

// Rule attr_decl
ruleattr_decl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttr_declAccess().getReadonly_attr_specParserRuleCall_0()); 
    }
    this_readonly_attr_spec_0=rulereadonly_attr_spec
    { 
        $current = $this_readonly_attr_spec_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttr_declAccess().getAttr_specParserRuleCall_1()); 
    }
    this_attr_spec_1=ruleattr_spec
    { 
        $current = $this_attr_spec_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulereadonly_attr_spec
entryRulereadonly_attr_spec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReadonly_attr_specRule()); }
	 iv_rulereadonly_attr_spec=rulereadonly_attr_spec 
	 { $current=$iv_rulereadonly_attr_spec.current; } 
	 EOF 
;

// Rule readonly_attr_spec
rulereadonly_attr_spec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_isReadonly_0_0=	'readonly' 
    {
        newLeafNode(lv_isReadonly_0_0, grammarAccess.getReadonly_attr_specAccess().getIsReadonlyReadonlyKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReadonly_attr_specRule());
	        }
       		setWithLastConsumed($current, "isReadonly", true, "readonly");
	    }

)
)	otherlv_1='attribute' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReadonly_attr_specAccess().getAttributeKeyword_0_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getReadonly_attr_specAccess().getContainedTypeBase_type_specParserRuleCall_0_2_0_0()); 
	    }
		lv_containedType_2_0=rulebase_type_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReadonly_attr_specRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_2_0, 
        		"base_type_spec");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReadonly_attr_specRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getReadonly_attr_specAccess().getSharedTypeTypedefDefCrossReference_0_2_1_0()); 
	}

)
))(
(
		lv_identifier_4_0=RULE_ID
		{
			newLeafNode(lv_identifier_4_0, grammarAccess.getReadonly_attr_specAccess().getIdentifierIDTerminalRuleCall_0_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReadonly_attr_specRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_4_0, 
        		"ID");
	    }

)
)	otherlv_5='raises' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getReadonly_attr_specAccess().getRaisesKeyword_0_4());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getReadonly_attr_specAccess().getLeftParenthesisKeyword_0_5());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReadonly_attr_specRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getReadonly_attr_specAccess().getGetRaisesExceptionDefCrossReference_0_6_0()); 
	}

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getReadonly_attr_specAccess().getCommaKeyword_0_7_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReadonly_attr_specRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getReadonly_attr_specAccess().getGetRaisesExceptionDefCrossReference_0_7_1_0()); 
	}

)
))*	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getReadonly_attr_specAccess().getRightParenthesisKeyword_0_8());
    }
)
    |((
(
		lv_isReadonly_11_0=	'readonly' 
    {
        newLeafNode(lv_isReadonly_11_0, grammarAccess.getReadonly_attr_specAccess().getIsReadonlyReadonlyKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReadonly_attr_specRule());
	        }
       		setWithLastConsumed($current, "isReadonly", true, "readonly");
	    }

)
)	otherlv_12='attribute' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getReadonly_attr_specAccess().getAttributeKeyword_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getReadonly_attr_specAccess().getContainedTypeBase_type_specParserRuleCall_1_2_0_0()); 
	    }
		lv_containedType_13_0=rulebase_type_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReadonly_attr_specRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_13_0, 
        		"base_type_spec");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReadonly_attr_specRule());
	        }
        }
	otherlv_14=RULE_ID
	{
		newLeafNode(otherlv_14, grammarAccess.getReadonly_attr_specAccess().getSharedTypeTypedefDefCrossReference_1_2_1_0()); 
	}

)
))(
(
		lv_identifier_15_0=RULE_ID
		{
			newLeafNode(lv_identifier_15_0, grammarAccess.getReadonly_attr_specAccess().getIdentifierIDTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReadonly_attr_specRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_15_0, 
        		"ID");
	    }

)
)))
;





// Entry rule entryRuleattr_spec
entryRuleattr_spec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttr_specRule()); }
	 iv_ruleattr_spec=ruleattr_spec 
	 { $current=$iv_ruleattr_spec.current; } 
	 EOF 
;

// Rule attr_spec
ruleattr_spec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='attribute' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttr_specAccess().getAttributeKeyword_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttr_specAccess().getContainedTypeBase_type_specParserRuleCall_0_1_0_0()); 
	    }
		lv_containedType_1_0=rulebase_type_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttr_specRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_1_0, 
        		"base_type_spec");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttr_specRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getAttr_specAccess().getSharedTypeTypedefDefCrossReference_0_1_1_0()); 
	}

)
))(
(
		lv_identifier_3_0=RULE_ID
		{
			newLeafNode(lv_identifier_3_0, grammarAccess.getAttr_specAccess().getIdentifierIDTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttr_specRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_3_0, 
        		"ID");
	    }

)
)((	otherlv_4='getraises' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttr_specAccess().getGetraisesKeyword_0_3_0_0());
    }
	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAttr_specAccess().getLeftParenthesisKeyword_0_3_0_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttr_specRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getAttr_specAccess().getGetRaisesExceptionDefCrossReference_0_3_0_2_0()); 
	}

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAttr_specAccess().getCommaKeyword_0_3_0_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttr_specRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getAttr_specAccess().getGetRaisesExceptionDefCrossReference_0_3_0_3_1_0()); 
	}

)
))*	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAttr_specAccess().getRightParenthesisKeyword_0_3_0_4());
    }
(	otherlv_10='setraises' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getAttr_specAccess().getSetraisesKeyword_0_3_0_5_0());
    }
	otherlv_11='(' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAttr_specAccess().getLeftParenthesisKeyword_0_3_0_5_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttr_specRule());
	        }
        }
	otherlv_12=RULE_ID
	{
		newLeafNode(otherlv_12, grammarAccess.getAttr_specAccess().getSetRaisesExceptionDefCrossReference_0_3_0_5_2_0()); 
	}

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getAttr_specAccess().getCommaKeyword_0_3_0_5_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttr_specRule());
	        }
        }
	otherlv_14=RULE_ID
	{
		newLeafNode(otherlv_14, grammarAccess.getAttr_specAccess().getSetRaisesExceptionDefCrossReference_0_3_0_5_3_1_0()); 
	}

)
))*	otherlv_15=')' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getAttr_specAccess().getRightParenthesisKeyword_0_3_0_5_4());
    }
)?)
    |(	otherlv_16='setraises' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getAttr_specAccess().getSetraisesKeyword_0_3_1_0());
    }
	otherlv_17='(' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getAttr_specAccess().getLeftParenthesisKeyword_0_3_1_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttr_specRule());
	        }
        }
	otherlv_18=RULE_ID
	{
		newLeafNode(otherlv_18, grammarAccess.getAttr_specAccess().getSetRaisesExceptionDefCrossReference_0_3_1_2_0()); 
	}

)
)(	otherlv_19=',' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getAttr_specAccess().getCommaKeyword_0_3_1_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttr_specRule());
	        }
        }
	otherlv_20=RULE_ID
	{
		newLeafNode(otherlv_20, grammarAccess.getAttr_specAccess().getSetRaisesExceptionDefCrossReference_0_3_1_3_1_0()); 
	}

)
))*	otherlv_21=')' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getAttr_specAccess().getRightParenthesisKeyword_0_3_1_4());
    }
)))
    |(	otherlv_22='attribute' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getAttr_specAccess().getAttributeKeyword_1_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttr_specAccess().getContainedTypeBase_type_specParserRuleCall_1_1_0_0()); 
	    }
		lv_containedType_23_0=rulebase_type_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttr_specRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_23_0, 
        		"base_type_spec");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttr_specRule());
	        }
        }
	otherlv_24=RULE_ID
	{
		newLeafNode(otherlv_24, grammarAccess.getAttr_specAccess().getSharedTypeTypedefDefCrossReference_1_1_1_0()); 
	}

)
))(
(
		lv_identifier_25_0=RULE_ID
		{
			newLeafNode(lv_identifier_25_0, grammarAccess.getAttr_specAccess().getIdentifierIDTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttr_specRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_25_0, 
        		"ID");
	    }

)
)))
;





// Entry rule entryRuleexcept_decl
entryRuleexcept_decl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExcept_declRule()); }
	 iv_ruleexcept_decl=ruleexcept_decl 
	 { $current=$iv_ruleexcept_decl.current; } 
	 EOF 
;

// Rule except_decl
ruleexcept_decl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='exception' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExcept_declAccess().getExceptionKeyword_0());
    }
(
(
		lv_identifier_1_0=RULE_ID
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getExcept_declAccess().getIdentifierIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExcept_declRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExcept_declAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExcept_declAccess().getMembersMemberParserRuleCall_3_0()); 
	    }
		lv_members_3_0=rulemember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExcept_declRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_3_0, 
        		"member");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExcept_declAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuletype_decl
entryRuletype_decl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_declRule()); }
	 iv_ruletype_decl=ruletype_decl 
	 { $current=$iv_ruletype_decl.current; } 
	 EOF 
;

// Rule type_decl
ruletype_decl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getType_declAccess().getAlias_typeParserRuleCall_0()); 
    }
    this_alias_type_0=rulealias_type
    { 
        $current = $this_alias_type_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getType_declAccess().getStruct_typeParserRuleCall_1()); 
    }
    this_struct_type_1=rulestruct_type
    { 
        $current = $this_struct_type_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getType_declAccess().getUnion_typeParserRuleCall_2()); 
    }
    this_union_type_2=ruleunion_type
    { 
        $current = $this_union_type_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getType_declAccess().getEnum_typeParserRuleCall_3()); 
    }
    this_enum_type_3=ruleenum_type
    { 
        $current = $this_enum_type_3.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_4='native' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getType_declAccess().getNativeKeyword_4_0());
    }
this_ID_5=RULE_ID
    { 
    newLeafNode(this_ID_5, grammarAccess.getType_declAccess().getIDTerminalRuleCall_4_1()); 
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getType_declAccess().getConstr_forward_declParserRuleCall_5()); 
    }
ruleconstr_forward_decl
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulealias_type
entryRulealias_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlias_typeRule()); }
	 iv_rulealias_type=rulealias_type 
	 { $current=$iv_rulealias_type.current; } 
	 EOF 
;

// Rule alias_type
rulealias_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='typedef' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAlias_typeAccess().getTypedefKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlias_typeAccess().getContainedTypeArray_type_specParserRuleCall_0_1_0()); 
	    }
		lv_containedType_1_0=rulearray_type_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlias_typeRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_1_0, 
        		"array_type_spec");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_2='typedef' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAlias_typeAccess().getTypedefKeyword_1_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAlias_typeAccess().getContainedTypeSimple_type_specParserRuleCall_1_1_0_0()); 
	    }
		lv_containedType_3_0=rulesimple_type_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlias_typeRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_3_0, 
        		"simple_type_spec");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAlias_typeRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getAlias_typeAccess().getSharedTypeTypedefDefCrossReference_1_1_1_0()); 
	}

)
))(
(
		lv_identifier_5_0=RULE_ID
		{
			newLeafNode(lv_identifier_5_0, grammarAccess.getAlias_typeAccess().getIdentifierIDTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAlias_typeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_5_0, 
        		"ID");
	    }

)
)))
;





// Entry rule entryRulearray_type_spec
entryRulearray_type_spec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArray_type_specRule()); }
	 iv_rulearray_type_spec=rulearray_type_spec 
	 { $current=$iv_rulearray_type_spec.current; } 
	 EOF 
;

// Rule array_type_spec
rulearray_type_spec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getArray_type_specAccess().getContainedTypeSimple_type_specParserRuleCall_0_0_0()); 
	    }
		lv_containedType_0_0=rulesimple_type_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArray_type_specRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_0_0, 
        		"simple_type_spec");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getArray_type_specRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getArray_type_specAccess().getSharedTypeTypedefDefCrossReference_0_1_0()); 
	}

)
))(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getArray_type_specAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArray_type_specRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArray_type_specAccess().getLeftSquareBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArray_type_specAccess().getBoundsConst_expParserRuleCall_2_1_0()); 
	    }
		lv_bounds_4_0=ruleconst_exp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArray_type_specRule());
	        }
       		add(
       			$current, 
       			"bounds",
        		lv_bounds_4_0, 
        		"const_exp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArray_type_specAccess().getRightSquareBracketKeyword_2_2());
    }
)+)
;





// Entry rule entryRulesimple_type_spec
entryRulesimple_type_spec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_type_specRule()); }
	 iv_rulesimple_type_spec=rulesimple_type_spec 
	 { $current=$iv_rulesimple_type_spec.current; } 
	 EOF 
;

// Rule simple_type_spec
rulesimple_type_spec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimple_type_specAccess().getBase_type_specParserRuleCall_0()); 
    }
    this_base_type_spec_0=rulebase_type_spec
    { 
        $current = $this_base_type_spec_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimple_type_specAccess().getTemplate_type_specParserRuleCall_1()); 
    }
    this_template_type_spec_1=ruletemplate_type_spec
    { 
        $current = $this_template_type_spec_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulebase_type_spec
entryRulebase_type_spec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBase_type_specRule()); }
	 iv_rulebase_type_spec=rulebase_type_spec 
	 { $current=$iv_rulebase_type_spec.current; } 
	 EOF 
;

// Rule base_type_spec
rulebase_type_spec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBase_type_specAccess().getPrimitive_defParserRuleCall_0()); 
    }
    this_primitive_def_0=ruleprimitive_def
    { 
        $current = $this_primitive_def_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBase_type_specAccess().getKindObject_typeEnumRuleCall_1_0()); 
	    }
		lv_kind_1_0=ruleobject_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBase_type_specRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_1_0, 
        		"object_type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuletemplate_type_spec
entryRuletemplate_type_spec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplate_type_specRule()); }
	 iv_ruletemplate_type_spec=ruletemplate_type_spec 
	 { $current=$iv_ruletemplate_type_spec.current; } 
	 EOF 
;

// Rule template_type_spec
ruletemplate_type_spec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTemplate_type_specAccess().getSequence_typeParserRuleCall_0()); 
    }
    this_sequence_type_0=rulesequence_type
    { 
        $current = $this_sequence_type_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTemplate_type_specAccess().getStringdef_typeParserRuleCall_1()); 
    }
    this_stringdef_type_1=rulestringdef_type
    { 
        $current = $this_stringdef_type_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTemplate_type_specAccess().getWide_stringdef_typeParserRuleCall_2()); 
    }
    this_wide_stringdef_type_2=rulewide_stringdef_type
    { 
        $current = $this_wide_stringdef_type_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTemplate_type_specAccess().getFixed_pt_typeParserRuleCall_3()); 
    }
    this_fixed_pt_type_3=rulefixed_pt_type
    { 
        $current = $this_fixed_pt_type_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRulestruct_type
entryRulestruct_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStruct_typeRule()); }
	 iv_rulestruct_type=rulestruct_type 
	 { $current=$iv_rulestruct_type.current; } 
	 EOF 
;

// Rule struct_type
rulestruct_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='struct' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStruct_typeAccess().getStructKeyword_0());
    }
(
(
		lv_identifier_1_0=RULE_ID
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getStruct_typeAccess().getIdentifierIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStruct_typeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStruct_typeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStruct_typeAccess().getMembersMemberParserRuleCall_3_0()); 
	    }
		lv_members_3_0=rulemember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStruct_typeRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_3_0, 
        		"member");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStruct_typeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRulemember
entryRulemember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	 iv_rulemember=rulemember 
	 { $current=$iv_rulemember.current; } 
	 EOF 
;

// Rule member
rulemember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccess().getContainedTypeArray_type_specParserRuleCall_0_0_0()); 
	    }
		lv_containedType_0_0=rulearray_type_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_0_0, 
        		"array_type_spec");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMemberAccess().getSemicolonKeyword_0_1());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccess().getContainedTypeSimple_type_specParserRuleCall_1_0_0()); 
	    }
		lv_containedType_2_0=rulesimple_type_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_2_0, 
        		"simple_type_spec");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_identifier_3_0=RULE_ID
		{
			newLeafNode(lv_identifier_3_0, grammarAccess.getMemberAccess().getIdentifierIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_3_0, 
        		"ID");
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMemberAccess().getSemicolonKeyword_1_2());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccess().getContainedTypeStruct_typeParserRuleCall_2_0_0()); 
	    }
		lv_containedType_5_0=rulestruct_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_5_0, 
        		"struct_type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_identifier_6_0=RULE_ID
		{
			newLeafNode(lv_identifier_6_0, grammarAccess.getMemberAccess().getIdentifierIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_6_0, 
        		"ID");
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMemberAccess().getSemicolonKeyword_2_2());
    }
)
    |((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getMemberAccess().getSharedTypeTypedefDefCrossReference_3_0_0()); 
	}

)
)(
(
		lv_identifier_9_0=RULE_ID
		{
			newLeafNode(lv_identifier_9_0, grammarAccess.getMemberAccess().getIdentifierIDTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_9_0, 
        		"ID");
	    }

)
)	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMemberAccess().getSemicolonKeyword_3_2());
    }
))
;





// Entry rule entryRuleunion_type
entryRuleunion_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnion_typeRule()); }
	 iv_ruleunion_type=ruleunion_type 
	 { $current=$iv_ruleunion_type.current; } 
	 EOF 
;

// Rule union_type
ruleunion_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='union' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnion_typeAccess().getUnionKeyword_0());
    }
(
(
		lv_identifier_1_0=RULE_ID
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getUnion_typeAccess().getIdentifierIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnion_typeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"ID");
	    }

)
)	otherlv_2='switch' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnion_typeAccess().getSwitchKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnion_typeAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnion_typeAccess().getContainedDiscrimSwitch_type_spec_contParserRuleCall_4_0_0()); 
	    }
		lv_containedDiscrim_4_0=ruleswitch_type_spec_cont		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnion_typeRule());
	        }
       		set(
       			$current, 
       			"containedDiscrim",
        		lv_containedDiscrim_4_0, 
        		"switch_type_spec_cont");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnion_typeRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getUnion_typeAccess().getSharedDiscrimEnumDefCrossReference_4_1_0()); 
	}

)
))	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnion_typeAccess().getRightParenthesisKeyword_5());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getUnion_typeAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnion_typeAccess().getUnionMembersCase_stmtParserRuleCall_7_0()); 
	    }
		lv_unionMembers_8_0=rulecase_stmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnion_typeRule());
	        }
       		add(
       			$current, 
       			"unionMembers",
        		lv_unionMembers_8_0, 
        		"case_stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getUnion_typeAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleswitch_type_spec_cont
entryRuleswitch_type_spec_cont returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitch_type_spec_contRule()); }
	 iv_ruleswitch_type_spec_cont=ruleswitch_type_spec_cont 
	 { $current=$iv_ruleswitch_type_spec_cont.current; } 
	 EOF 
;

// Rule switch_type_spec_cont
ruleswitch_type_spec_cont returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSwitch_type_spec_contAccess().getInteger_typeParserRuleCall_0()); 
    }
    this_integer_type_0=ruleinteger_type
    { 
        $current = $this_integer_type_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSwitch_type_spec_contAccess().getPrimitiveDefAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitch_type_spec_contAccess().getKindChar_typeEnumRuleCall_1_1_0()); 
	    }
		lv_kind_2_0=rulechar_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitch_type_spec_contRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_2_0, 
        		"char_type");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSwitch_type_spec_contAccess().getPrimitiveDefAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitch_type_spec_contAccess().getKindBoolean_typeEnumRuleCall_2_1_0()); 
	    }
		lv_kind_4_0=ruleboolean_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitch_type_spec_contRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_4_0, 
        		"boolean_type");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSwitch_type_spec_contAccess().getEnum_typeParserRuleCall_3()); 
    }
    this_enum_type_5=ruleenum_type
    { 
        $current = $this_enum_type_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulecase_stmt
entryRulecase_stmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCase_stmtRule()); }
	 iv_rulecase_stmt=rulecase_stmt 
	 { $current=$iv_rulecase_stmt.current; } 
	 EOF 
;

// Rule case_stmt
rulecase_stmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCase_stmtAccess().getCaseKeyword_0_0_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCase_stmtAccess().getLabelConst_expParserRuleCall_0_0_0_1_0()); 
	    }
		lv_label_1_0=ruleconst_exp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCase_stmtRule());
	        }
       		add(
       			$current, 
       			"label",
        		lv_label_1_0, 
        		"const_exp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCase_stmtAccess().getColonKeyword_0_0_0_2());
    }
)
    |(	otherlv_3='default' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCase_stmtAccess().getDefaultKeyword_0_0_1_0());
    }
	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCase_stmtAccess().getColonKeyword_0_0_1_1());
    }
))+(
(
		{ 
	        newCompositeNode(grammarAccess.getCase_stmtAccess().getContainedTypeArray_type_specParserRuleCall_0_1_0()); 
	    }
		lv_containedType_5_0=rulearray_type_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCase_stmtRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_5_0, 
        		"array_type_spec");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCase_stmtAccess().getSemicolonKeyword_0_2());
    }
)
    |(((	otherlv_7='case' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCase_stmtAccess().getCaseKeyword_1_0_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCase_stmtAccess().getLabelConst_expParserRuleCall_1_0_0_1_0()); 
	    }
		lv_label_8_0=ruleconst_exp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCase_stmtRule());
	        }
       		add(
       			$current, 
       			"label",
        		lv_label_8_0, 
        		"const_exp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCase_stmtAccess().getColonKeyword_1_0_0_2());
    }
)
    |(	otherlv_10='default' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getCase_stmtAccess().getDefaultKeyword_1_0_1_0());
    }
	otherlv_11=':' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getCase_stmtAccess().getColonKeyword_1_0_1_1());
    }
))+((
(
		{ 
	        newCompositeNode(grammarAccess.getCase_stmtAccess().getContainedTypeSimple_type_specParserRuleCall_1_1_0_0()); 
	    }
		lv_containedType_12_0=rulesimple_type_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCase_stmtRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_12_0, 
        		"simple_type_spec");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCase_stmtRule());
	        }
        }
	otherlv_13=RULE_ID
	{
		newLeafNode(otherlv_13, grammarAccess.getCase_stmtAccess().getSharedTypeTypedefDefCrossReference_1_1_1_0()); 
	}

)
))(
(
		lv_identifier_14_0=RULE_ID
		{
			newLeafNode(lv_identifier_14_0, grammarAccess.getCase_stmtAccess().getIdentifierIDTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCase_stmtRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_14_0, 
        		"ID");
	    }

)
)	otherlv_15=';' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getCase_stmtAccess().getSemicolonKeyword_1_3());
    }
))
;





// Entry rule entryRuleenum_type
entryRuleenum_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnum_typeRule()); }
	 iv_ruleenum_type=ruleenum_type 
	 { $current=$iv_ruleenum_type.current; } 
	 EOF 
;

// Rule enum_type
ruleenum_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnum_typeAccess().getEnumKeyword_0());
    }
(
(
		lv_identifier_1_0=RULE_ID
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getEnum_typeAccess().getIdentifierIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnum_typeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnum_typeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnum_typeAccess().getMembersEnum_memberParserRuleCall_3_0()); 
	    }
		lv_members_3_0=ruleenum_member		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnum_typeRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_3_0, 
        		"enum_member");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnum_typeAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnum_typeAccess().getMembersEnum_memberParserRuleCall_4_1_0()); 
	    }
		lv_members_5_0=ruleenum_member		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnum_typeRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_5_0, 
        		"enum_member");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnum_typeAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleenum_member
entryRuleenum_member returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnum_memberRule()); }
	 iv_ruleenum_member=ruleenum_member 
	 { $current=$iv_ruleenum_member.current; } 
	 EOF 
;

// Rule enum_member
ruleenum_member returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_identifier_0_0=RULE_ID
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getEnum_memberAccess().getIdentifierIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnum_memberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleconstr_forward_decl
entryRuleconstr_forward_decl returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstr_forward_declRule()); } 
	 iv_ruleconstr_forward_decl=ruleconstr_forward_decl 
	 { $current=$iv_ruleconstr_forward_decl.current.getText(); }  
	 EOF 
;

// Rule constr_forward_decl
ruleconstr_forward_decl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='struct' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstr_forward_declAccess().getStructKeyword_0_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getConstr_forward_declAccess().getIDTerminalRuleCall_0_1()); 
    }
)
    |(
	kw='union' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstr_forward_declAccess().getUnionKeyword_1_0()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getConstr_forward_declAccess().getIDTerminalRuleCall_1_1()); 
    }
))
    ;





// Entry rule entryRuleconst_decl
entryRuleconst_decl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConst_declRule()); }
	 iv_ruleconst_decl=ruleconst_decl 
	 { $current=$iv_ruleconst_decl.current; } 
	 EOF 
;

// Rule const_decl
ruleconst_decl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='const' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConst_declAccess().getConstKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getConst_declAccess().getContainedTypeConst_typeParserRuleCall_1_0_0()); 
	    }
		lv_containedType_1_0=ruleconst_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConst_declRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_1_0, 
        		"const_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConst_declRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getConst_declAccess().getSharedTypeAliasDefCrossReference_1_1_0()); 
	}

)
))(
(
		lv_identifier_3_0=RULE_ID
		{
			newLeafNode(lv_identifier_3_0, grammarAccess.getConst_declAccess().getIdentifierIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConst_declRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_3_0, 
        		"ID");
	    }

)
)	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConst_declAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConst_declAccess().getConstValueConst_expParserRuleCall_4_0()); 
	    }
		lv_constValue_5_0=ruleconst_exp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConst_declRule());
	        }
       		set(
       			$current, 
       			"constValue",
        		lv_constValue_5_0, 
        		"const_exp");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleconst_type
entryRuleconst_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConst_typeRule()); }
	 iv_ruleconst_type=ruleconst_type 
	 { $current=$iv_ruleconst_type.current; } 
	 EOF 
;

// Rule const_type
ruleconst_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConst_typeAccess().getPrimitive_defParserRuleCall_0()); 
    }
    this_primitive_def_0=ruleprimitive_def
    { 
        $current = $this_primitive_def_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConst_typeAccess().getStringdef_typeParserRuleCall_1()); 
    }
    this_stringdef_type_1=rulestringdef_type
    { 
        $current = $this_stringdef_type_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConst_typeAccess().getWide_stringdef_typeParserRuleCall_2()); 
    }
    this_wide_stringdef_type_2=rulewide_stringdef_type
    { 
        $current = $this_wide_stringdef_type_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConst_typeAccess().getFixed_pt_const_typeParserRuleCall_3()); 
    }
    this_fixed_pt_const_type_3=rulefixed_pt_const_type
    { 
        $current = $this_fixed_pt_const_type_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleprimitive_def
entryRuleprimitive_def returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitive_defRule()); }
	 iv_ruleprimitive_def=ruleprimitive_def 
	 { $current=$iv_ruleprimitive_def.current; } 
	 EOF 
;

// Rule primitive_def
ruleprimitive_def returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimitive_defAccess().getInteger_typeParserRuleCall_0()); 
    }
    this_integer_type_0=ruleinteger_type
    { 
        $current = $this_integer_type_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimitive_defAccess().getFloating_pt_typeParserRuleCall_1()); 
    }
    this_floating_pt_type_1=rulefloating_pt_type
    { 
        $current = $this_floating_pt_type_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimitive_defAccess().getCharstr_typeParserRuleCall_2()); 
    }
    this_charstr_type_2=rulecharstr_type
    { 
        $current = $this_charstr_type_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimitive_defAccess().getOther_typeParserRuleCall_3()); 
    }
    this_other_type_3=ruleother_type
    { 
        $current = $this_other_type_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulesequence_type
entryRulesequence_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequence_typeRule()); }
	 iv_rulesequence_type=rulesequence_type 
	 { $current=$iv_rulesequence_type.current; } 
	 EOF 
;

// Rule sequence_type
rulesequence_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sequence' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSequence_typeAccess().getSequenceKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSequence_typeAccess().getLessThanSignKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSequence_typeAccess().getContainedTypeSimple_type_specParserRuleCall_2_0_0()); 
	    }
		lv_containedType_2_0=rulesimple_type_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequence_typeRule());
	        }
       		set(
       			$current, 
       			"containedType",
        		lv_containedType_2_0, 
        		"simple_type_spec");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSequence_typeRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getSequence_typeAccess().getSharedTypeTypedefDefCrossReference_2_1_0()); 
	}

)
))(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSequence_typeAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequence_typeAccess().getBoundConst_expParserRuleCall_3_1_0()); 
	    }
		lv_bound_5_0=ruleconst_exp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequence_typeRule());
	        }
       		set(
       			$current, 
       			"bound",
        		lv_bound_5_0, 
        		"const_exp");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='>' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSequence_typeAccess().getGreaterThanSignKeyword_4());
    }
)
;





// Entry rule entryRulestringdef_type
entryRulestringdef_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringdef_typeRule()); }
	 iv_rulestringdef_type=rulestringdef_type 
	 { $current=$iv_rulestringdef_type.current; } 
	 EOF 
;

// Rule stringdef_type
rulestringdef_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='string' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStringdef_typeAccess().getStringKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStringdef_typeAccess().getLessThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringdef_typeAccess().getBoundConst_expParserRuleCall_2_0()); 
	    }
		lv_bound_2_0=ruleconst_exp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringdef_typeRule());
	        }
       		set(
       			$current, 
       			"bound",
        		lv_bound_2_0, 
        		"const_exp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStringdef_typeAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRulewide_stringdef_type
entryRulewide_stringdef_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWide_stringdef_typeRule()); }
	 iv_rulewide_stringdef_type=rulewide_stringdef_type 
	 { $current=$iv_rulewide_stringdef_type.current; } 
	 EOF 
;

// Rule wide_stringdef_type
rulewide_stringdef_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='wstring' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWide_stringdef_typeAccess().getWstringKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWide_stringdef_typeAccess().getLessThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWide_stringdef_typeAccess().getBoundConst_expParserRuleCall_2_0()); 
	    }
		lv_bound_2_0=ruleconst_exp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWide_stringdef_typeRule());
	        }
       		set(
       			$current, 
       			"bound",
        		lv_bound_2_0, 
        		"const_exp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWide_stringdef_typeAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRulefixed_pt_type
entryRulefixed_pt_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFixed_pt_typeRule()); }
	 iv_rulefixed_pt_type=rulefixed_pt_type 
	 { $current=$iv_rulefixed_pt_type.current; } 
	 EOF 
;

// Rule fixed_pt_type
rulefixed_pt_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fixed' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFixed_pt_typeAccess().getFixedKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFixed_pt_typeAccess().getLessThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFixed_pt_typeAccess().getDigitsConst_expParserRuleCall_2_0()); 
	    }
		lv_digits_2_0=ruleconst_exp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFixed_pt_typeRule());
	        }
       		set(
       			$current, 
       			"digits",
        		lv_digits_2_0, 
        		"const_exp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFixed_pt_typeAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFixed_pt_typeAccess().getScaleConst_expParserRuleCall_4_0()); 
	    }
		lv_scale_4_0=ruleconst_exp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFixed_pt_typeRule());
	        }
       		set(
       			$current, 
       			"scale",
        		lv_scale_4_0, 
        		"const_exp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFixed_pt_typeAccess().getGreaterThanSignKeyword_5());
    }
)
;





// Entry rule entryRulefloating_pt_type
entryRulefloating_pt_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloating_pt_typeRule()); }
	 iv_rulefloating_pt_type=rulefloating_pt_type 
	 { $current=$iv_rulefloating_pt_type.current; } 
	 EOF 
;

// Rule floating_pt_type
rulefloating_pt_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFloating_pt_typeAccess().getKindFloat_typeEnumRuleCall_0_0()); 
	    }
		lv_kind_0_0=rulefloat_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFloating_pt_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_0_0, 
        		"float_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFloating_pt_typeAccess().getKindDouble_typeEnumRuleCall_1_0()); 
	    }
		lv_kind_1_0=ruledouble_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFloating_pt_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_1_0, 
        		"double_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFloating_pt_typeAccess().getKindLongdouble_typeParserRuleCall_2_0()); 
	    }
		lv_kind_2_0=rulelongdouble_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFloating_pt_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_2_0, 
        		"longdouble_type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulelongdouble_type
entryRulelongdouble_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLongdouble_typeRule()); } 
	 iv_rulelongdouble_type=rulelongdouble_type 
	 { $current=$iv_rulelongdouble_type.current.getText(); }  
	 EOF 
;

// Rule longdouble_type
rulelongdouble_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLongdouble_typeAccess().getLongKeyword_0()); 
    }

	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLongdouble_typeAccess().getDoubleKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleinteger_type
entryRuleinteger_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInteger_typeRule()); }
	 iv_ruleinteger_type=ruleinteger_type 
	 { $current=$iv_ruleinteger_type.current; } 
	 EOF 
;

// Rule integer_type
ruleinteger_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInteger_typeAccess().getKindShort_typeEnumRuleCall_0_0()); 
	    }
		lv_kind_0_0=ruleshort_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteger_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_0_0, 
        		"short_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInteger_typeAccess().getKindLong_typeEnumRuleCall_1_0()); 
	    }
		lv_kind_1_0=rulelong_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteger_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_1_0, 
        		"long_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInteger_typeAccess().getKindLonglong_typeParserRuleCall_2_0()); 
	    }
		lv_kind_2_0=rulelonglong_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteger_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_2_0, 
        		"longlong_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInteger_typeAccess().getKindUshort_typeParserRuleCall_3_0()); 
	    }
		lv_kind_3_0=ruleushort_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteger_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_3_0, 
        		"ushort_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInteger_typeAccess().getKindUlong_typeParserRuleCall_4_0()); 
	    }
		lv_kind_4_0=ruleulong_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteger_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_4_0, 
        		"ulong_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInteger_typeAccess().getKindUlonglong_typeParserRuleCall_5_0()); 
	    }
		lv_kind_5_0=ruleulonglong_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteger_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_5_0, 
        		"ulonglong_type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulelonglong_type
entryRulelonglong_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLonglong_typeRule()); } 
	 iv_rulelonglong_type=rulelonglong_type 
	 { $current=$iv_rulelonglong_type.current.getText(); }  
	 EOF 
;

// Rule longlong_type
rulelonglong_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLonglong_typeAccess().getLongKeyword_0()); 
    }

	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLonglong_typeAccess().getLongKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleushort_type
entryRuleushort_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUshort_typeRule()); } 
	 iv_ruleushort_type=ruleushort_type 
	 { $current=$iv_ruleushort_type.current.getText(); }  
	 EOF 
;

// Rule ushort_type
ruleushort_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='unsigned' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUshort_typeAccess().getUnsignedKeyword_0()); 
    }

	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUshort_typeAccess().getShortKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleulong_type
entryRuleulong_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUlong_typeRule()); } 
	 iv_ruleulong_type=ruleulong_type 
	 { $current=$iv_ruleulong_type.current.getText(); }  
	 EOF 
;

// Rule ulong_type
ruleulong_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='unsigned' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUlong_typeAccess().getUnsignedKeyword_0()); 
    }

	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUlong_typeAccess().getLongKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleulonglong_type
entryRuleulonglong_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUlonglong_typeRule()); } 
	 iv_ruleulonglong_type=ruleulonglong_type 
	 { $current=$iv_ruleulonglong_type.current.getText(); }  
	 EOF 
;

// Rule ulonglong_type
ruleulonglong_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='unsigned' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUlonglong_typeAccess().getUnsignedKeyword_0()); 
    }

	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUlonglong_typeAccess().getLongKeyword_1()); 
    }

	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUlonglong_typeAccess().getLongKeyword_2()); 
    }
)
    ;





// Entry rule entryRulecharstr_type
entryRulecharstr_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharstr_typeRule()); }
	 iv_rulecharstr_type=rulecharstr_type 
	 { $current=$iv_rulecharstr_type.current; } 
	 EOF 
;

// Rule charstr_type
rulecharstr_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCharstr_typeAccess().getKindChar_typeEnumRuleCall_0_0()); 
	    }
		lv_kind_0_0=rulechar_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCharstr_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_0_0, 
        		"char_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCharstr_typeAccess().getKindWide_char_typeEnumRuleCall_1_0()); 
	    }
		lv_kind_1_0=rulewide_char_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCharstr_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_1_0, 
        		"wide_char_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCharstr_typeAccess().getKindString_typeEnumRuleCall_2_0()); 
	    }
		lv_kind_2_0=rulestring_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCharstr_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_2_0, 
        		"string_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCharstr_typeAccess().getKindWide_string_typeEnumRuleCall_3_0()); 
	    }
		lv_kind_3_0=rulewide_string_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCharstr_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_3_0, 
        		"wide_string_type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleother_type
entryRuleother_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOther_typeRule()); }
	 iv_ruleother_type=ruleother_type 
	 { $current=$iv_ruleother_type.current; } 
	 EOF 
;

// Rule other_type
ruleother_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOther_typeAccess().getKindBoolean_typeEnumRuleCall_0_0()); 
	    }
		lv_kind_0_0=ruleboolean_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOther_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_0_0, 
        		"boolean_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOther_typeAccess().getKindOctet_typeEnumRuleCall_1_0()); 
	    }
		lv_kind_1_0=ruleoctet_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOther_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_1_0, 
        		"octet_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOther_typeAccess().getKindAny_typeEnumRuleCall_2_0()); 
	    }
		lv_kind_2_0=ruleany_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOther_typeRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_2_0, 
        		"any_type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulefixed_pt_const_type
entryRulefixed_pt_const_type returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFixed_pt_const_typeRule()); }
	 iv_rulefixed_pt_const_type=rulefixed_pt_const_type 
	 { $current=$iv_rulefixed_pt_const_type.current; } 
	 EOF 
;

// Rule fixed_pt_const_type
rulefixed_pt_const_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFixed_pt_const_typeAccess().getFixedDefAction_0(),
            $current);
    }
)	otherlv_1='fixed' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFixed_pt_const_typeAccess().getFixedKeyword_1());
    }
)
;





// Entry rule entryRuleconst_exp
entryRuleconst_exp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConst_expRule()); }
	 iv_ruleconst_exp=ruleconst_exp 
	 { $current=$iv_ruleconst_exp.current; } 
	 EOF 
;

// Rule const_exp
ruleconst_exp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConst_expAccess().getOr_exprParserRuleCall()); 
    }
    this_or_expr_0=ruleor_expr
    { 
        $current = $this_or_expr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleor_expr
entryRuleor_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOr_exprRule()); }
	 iv_ruleor_expr=ruleor_expr 
	 { $current=$iv_ruleor_expr.current; } 
	 EOF 
;

// Rule or_expr
ruleor_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOr_exprAccess().getXor_exprParserRuleCall_0()); 
    }
    this_xor_expr_0=rulexor_expr
    { 
        $current = $this_xor_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOr_exprAccess().getBinaryExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'|' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getOr_exprAccess().getOperatorVerticalLineKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOr_exprRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "|");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOr_exprAccess().getRightXor_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulexor_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOr_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"xor_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulexor_expr
entryRulexor_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXor_exprRule()); }
	 iv_rulexor_expr=rulexor_expr 
	 { $current=$iv_rulexor_expr.current; } 
	 EOF 
;

// Rule xor_expr
rulexor_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getXor_exprAccess().getAnd_exprParserRuleCall_0()); 
    }
    this_and_expr_0=ruleand_expr
    { 
        $current = $this_and_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXor_exprAccess().getBinaryExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'^' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getXor_exprAccess().getOperatorCircumflexAccentKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXor_exprRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "^");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXor_exprAccess().getRightAnd_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleand_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXor_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"and_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleand_expr
entryRuleand_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnd_exprRule()); }
	 iv_ruleand_expr=ruleand_expr 
	 { $current=$iv_ruleand_expr.current; } 
	 EOF 
;

// Rule and_expr
ruleand_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnd_exprAccess().getShift_exprParserRuleCall_0()); 
    }
    this_shift_expr_0=ruleshift_expr
    { 
        $current = $this_shift_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAnd_exprAccess().getBinaryExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'&' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getAnd_exprAccess().getOperatorAmpersandKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnd_exprRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "&");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAnd_exprAccess().getRightShift_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleshift_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnd_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"shift_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleshift_expr
entryRuleshift_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShift_exprRule()); }
	 iv_ruleshift_expr=ruleshift_expr 
	 { $current=$iv_ruleshift_expr.current; } 
	 EOF 
;

// Rule shift_expr
ruleshift_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getShift_exprAccess().getAdd_exprParserRuleCall_0()); 
    }
    this_add_expr_0=ruleadd_expr
    { 
        $current = $this_add_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getShift_exprAccess().getBinaryExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=	'>>' 
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getShift_exprAccess().getOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShift_exprRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=	'<<' 
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getShift_exprAccess().getOperatorLessThanSignLessThanSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShift_exprRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShift_exprAccess().getRightAdd_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleadd_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShift_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"add_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleadd_expr
entryRuleadd_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdd_exprRule()); }
	 iv_ruleadd_expr=ruleadd_expr 
	 { $current=$iv_ruleadd_expr.current; } 
	 EOF 
;

// Rule add_expr
ruleadd_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAdd_exprAccess().getMult_exprParserRuleCall_0()); 
    }
    this_mult_expr_0=rulemult_expr
    { 
        $current = $this_mult_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdd_exprAccess().getBinaryExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=	'+' 
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getAdd_exprAccess().getOperatorPlusSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdd_exprRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=	'-' 
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getAdd_exprAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdd_exprRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdd_exprAccess().getRightMult_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulemult_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdd_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"mult_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulemult_expr
entryRulemult_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMult_exprRule()); }
	 iv_rulemult_expr=rulemult_expr 
	 { $current=$iv_rulemult_expr.current; } 
	 EOF 
;

// Rule mult_expr
rulemult_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMult_exprAccess().getUnary_exprParserRuleCall_0()); 
    }
    this_unary_expr_0=ruleunary_expr
    { 
        $current = $this_unary_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMult_exprAccess().getBinaryExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=	'*' 
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getMult_exprAccess().getOperatorAsteriskKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMult_exprRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=	'/' 
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getMult_exprAccess().getOperatorSolidusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMult_exprRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

    |		lv_operator_2_3=	'%' 
    {
        newLeafNode(lv_operator_2_3, grammarAccess.getMult_exprAccess().getOperatorPercentSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMult_exprRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMult_exprAccess().getRightUnary_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleunary_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMult_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"unary_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleunary_expr
entryRuleunary_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnary_exprRule()); }
	 iv_ruleunary_expr=ruleunary_expr 
	 { $current=$iv_ruleunary_expr.current; } 
	 EOF 
;

// Rule unary_expr
ruleunary_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnary_exprAccess().getUnaryExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnary_exprAccess().getOperatorUnary_operatorParserRuleCall_0_1_0()); 
	    }
		lv_operator_1_0=ruleunary_operator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnary_exprRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"unary_operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnary_exprAccess().getExpressionPrimary_exprParserRuleCall_0_2_0()); 
	    }
		lv_expression_2_0=ruleprimary_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnary_exprRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"primary_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnary_exprAccess().getPrimary_exprParserRuleCall_1()); 
    }
    this_primary_expr_3=ruleprimary_expr
    { 
        $current = $this_primary_expr_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleunary_operator
entryRuleunary_operator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnary_operatorRule()); } 
	 iv_ruleunary_operator=ruleunary_operator 
	 { $current=$iv_ruleunary_operator.current.getText(); }  
	 EOF 
;

// Rule unary_operator
ruleunary_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnary_operatorAccess().getHyphenMinusKeyword_0()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnary_operatorAccess().getPlusSignKeyword_1()); 
    }

    |
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnary_operatorAccess().getTildeKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleprimary_expr
entryRuleprimary_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimary_exprRule()); }
	 iv_ruleprimary_expr=ruleprimary_expr 
	 { $current=$iv_ruleprimary_expr.current; } 
	 EOF 
;

// Rule primary_expr
ruleprimary_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimary_exprAccess().getConstantDefRefParserRuleCall_0()); 
    }
    this_constantDefRef_0=ruleconstantDefRef
    { 
        $current = $this_constantDefRef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimary_exprAccess().getValueExpressionParserRuleCall_1()); 
    }
    this_valueExpression_1=rulevalueExpression
    { 
        $current = $this_valueExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimary_exprAccess().getLeftParenthesisKeyword_2_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimary_exprAccess().getConst_expParserRuleCall_2_1()); 
    }
    this_const_exp_3=ruleconst_exp
    { 
        $current = $this_const_exp_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimary_exprAccess().getRightParenthesisKeyword_2_2());
    }
))
;





// Entry rule entryRuleconstantDefRef
entryRuleconstantDefRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDefRefRule()); }
	 iv_ruleconstantDefRef=ruleconstantDefRef 
	 { $current=$iv_ruleconstantDefRef.current; } 
	 EOF 
;

// Rule constantDefRef
ruleconstantDefRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDefRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getConstantDefRefAccess().getConstantConstantCrossReference_0()); 
	}

)
)
;





// Entry rule entryRulevalueExpression
entryRulevalueExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueExpressionRule()); }
	 iv_rulevalueExpression=rulevalueExpression 
	 { $current=$iv_rulevalueExpression.current; } 
	 EOF 
;

// Rule valueExpression
rulevalueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueExpressionAccess().getValueLiteralParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleliteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleliteral
entryRuleliteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleliteral=ruleliteral 
	 { $current=$iv_ruleliteral.current.getText(); }  
	 EOF 
;

// Rule literal
ruleliteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_1()); 
    }

    |    this_HEX_LITERAL_2=RULE_HEX_LITERAL    {
		$current.merge(this_HEX_LITERAL_2);
    }

    { 
    newLeafNode(this_HEX_LITERAL_2, grammarAccess.getLiteralAccess().getHEX_LITERALTerminalRuleCall_2()); 
    }

    |    this_WIDE_STRING_LITERAL_3=RULE_WIDE_STRING_LITERAL    {
		$current.merge(this_WIDE_STRING_LITERAL_3);
    }

    { 
    newLeafNode(this_WIDE_STRING_LITERAL_3, grammarAccess.getLiteralAccess().getWIDE_STRING_LITERALTerminalRuleCall_3()); 
    }

    |    this_FIXED_PT_LITERAL_4=RULE_FIXED_PT_LITERAL    {
		$current.merge(this_FIXED_PT_LITERAL_4);
    }

    { 
    newLeafNode(this_FIXED_PT_LITERAL_4, grammarAccess.getLiteralAccess().getFIXED_PT_LITERALTerminalRuleCall_4()); 
    }

    |    this_FLOATING_PT_LITERAL_5=RULE_FLOATING_PT_LITERAL    {
		$current.merge(this_FLOATING_PT_LITERAL_5);
    }

    { 
    newLeafNode(this_FLOATING_PT_LITERAL_5, grammarAccess.getLiteralAccess().getFLOATING_PT_LITERALTerminalRuleCall_5()); 
    }

    |    this_BOOLEAN_LITERAL_6=RULE_BOOLEAN_LITERAL    {
		$current.merge(this_BOOLEAN_LITERAL_6);
    }

    { 
    newLeafNode(this_BOOLEAN_LITERAL_6, grammarAccess.getLiteralAccess().getBOOLEAN_LITERALTerminalRuleCall_6()); 
    }
)
    ;





// Rule param_attribute
ruleparam_attribute returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='in' 
	{
        $current = grammarAccess.getParam_attributeAccess().getPARAM_INEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getParam_attributeAccess().getPARAM_INEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='out' 
	{
        $current = grammarAccess.getParam_attributeAccess().getPARAM_OUTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getParam_attributeAccess().getPARAM_OUTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='inout' 
	{
        $current = grammarAccess.getParam_attributeAccess().getPARAM_INOUTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getParam_attributeAccess().getPARAM_INOUTEnumLiteralDeclaration_2()); 
    }
));



// Rule float_type
rulefloat_type returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='float' 
	{
        $current = grammarAccess.getFloat_typeAccess().getPK_FLOATEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFloat_typeAccess().getPK_FLOATEnumLiteralDeclaration()); 
    }
);



// Rule double_type
ruledouble_type returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='double' 
	{
        $current = grammarAccess.getDouble_typeAccess().getPK_DOUBLEEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDouble_typeAccess().getPK_DOUBLEEnumLiteralDeclaration()); 
    }
);



// Rule short_type
ruleshort_type returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='short' 
	{
        $current = grammarAccess.getShort_typeAccess().getPK_SHORTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getShort_typeAccess().getPK_SHORTEnumLiteralDeclaration()); 
    }
);



// Rule long_type
rulelong_type returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='long' 
	{
        $current = grammarAccess.getLong_typeAccess().getPK_LONGEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLong_typeAccess().getPK_LONGEnumLiteralDeclaration()); 
    }
);



// Rule char_type
rulechar_type returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='char' 
	{
        $current = grammarAccess.getChar_typeAccess().getPK_CHAREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getChar_typeAccess().getPK_CHAREnumLiteralDeclaration()); 
    }
);



// Rule wide_char_type
rulewide_char_type returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='wchar' 
	{
        $current = grammarAccess.getWide_char_typeAccess().getPK_WCHAREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getWide_char_typeAccess().getPK_WCHAREnumLiteralDeclaration()); 
    }
);



// Rule string_type
rulestring_type returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='string' 
	{
        $current = grammarAccess.getString_typeAccess().getPK_STRINGEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getString_typeAccess().getPK_STRINGEnumLiteralDeclaration()); 
    }
);



// Rule wide_string_type
rulewide_string_type returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='wstring' 
	{
        $current = grammarAccess.getWide_string_typeAccess().getPK_WSTRINGEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getWide_string_typeAccess().getPK_WSTRINGEnumLiteralDeclaration()); 
    }
);



// Rule boolean_type
ruleboolean_type returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='boolean' 
	{
        $current = grammarAccess.getBoolean_typeAccess().getPK_BOOLEANEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBoolean_typeAccess().getPK_BOOLEANEnumLiteralDeclaration()); 
    }
);



// Rule octet_type
ruleoctet_type returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='octet' 
	{
        $current = grammarAccess.getOctet_typeAccess().getPK_OCTETEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOctet_typeAccess().getPK_OCTETEnumLiteralDeclaration()); 
    }
);



// Rule any_type
ruleany_type returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='any' 
	{
        $current = grammarAccess.getAny_typeAccess().getPK_ANYEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAny_typeAccess().getPK_ANYEnumLiteralDeclaration()); 
    }
);



// Rule object_type
ruleobject_type returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='Object' 
	{
        $current = grammarAccess.getObject_typeAccess().getPK_OBJREFEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getObject_typeAccess().getPK_OBJREFEnumLiteralDeclaration()); 
    }
);



// Rule void_type
rulevoid_type returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='void' 
	{
        $current = grammarAccess.getVoid_typeAccess().getPK_VOIDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getVoid_typeAccess().getPK_VOIDEnumLiteralDeclaration()); 
    }
);



RULE_WIDE_STRING_LITERAL : 'L' RULE_STRING;

RULE_FIXED_PT_LITERAL : (RULE_INT '.' RULE_INT (('e'|'E') ('+'|'-')? RULE_INT)?|'.' RULE_INT (('e'|'E') ('+'|'-')? RULE_INT)?|RULE_INT ('e'|'E') ('+'|'-')? RULE_INT);

RULE_FLOATING_PT_LITERAL : (RULE_INT '.' RULE_INT ('d'|'D')|RULE_INT ('d'|'D')|'.' RULE_INT ('d'|'D'));

RULE_BOOLEAN_LITERAL : ('TRUE'|'FALSE');

RULE_HEX_LITERAL : '0' 'x' ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'::') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'::')*;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


